package com.example.malwarescanner

import android.Manifest
import android.content.pm.PackageManager
import android.os.Build
import android.os.Bundle
import android.provider.Settings
import android.widget.Button
import android.widget.TextView
import androidx.activity.result.contract.ActivityResultContracts
import androidx.appcompat.app.AppCompatActivity
import androidx.core.content.ContextCompat
import android.content.Intent
import android.net.Uri
import android.util.Log
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import okhttp3.*
import org.json.JSONObject
import java.io.File
import java.io.FileInputStream
import java.math.BigInteger
import java.security.MessageDigest

class MainActivity : AppCompatActivity() {

    private lateinit var scanResultTextView: TextView
    private lateinit var updateStatusTextView: TextView
    private lateinit var scanButton: Button
    private lateinit var checkUpdateButton: Button

    private val requestPermissionLauncher = registerForActivityResult(
        ActivityResultContracts.RequestMultiplePermissions()
    ) { permissions ->
        var allGranted = true
        permissions.entries.forEach {
            if (!it.value) {
                allGranted = false
            }
        }
        if (allGranted) {
            performMalwareScan()
        } else {
            scanResultTextView.text = "Permissions denied. Cannot scan for malware."
        }
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        scanResultTextView = findViewById(R.id.scanResultTextView)
        updateStatusTextView = findViewById(R.id.updateStatusTextView)
        scanButton = findViewById(R.id.scanButton)
        checkUpdateButton = findViewById(R.id.checkUpdateButton)
        progressBar = findViewById(R.id.progressBar)

        scanButton.setOnClickListener {
            requestPermissionsAndScan()
        }

        checkUpdateButton.setOnClickListener {
            checkForAndroidUpdate()
        }
    }

    private fun requestPermissionsAndScan() {
        val permissionsNeeded = mutableListOf<String>()
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            // For Android 13+ add any specific permissions if needed
        }
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.QUERY_ALL_PACKAGES) != PackageManager.PERMISSION_GRANTED) {
            permissionsNeeded.add(Manifest.permission.QUERY_ALL_PACKAGES)
        }
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
            permissionsNeeded.add(Manifest.permission.READ_EXTERNAL_STORAGE)
        }
        if (permissionsNeeded.isNotEmpty()) {
            requestPermissionLauncher.launch(permissionsNeeded.toTypedArray())
        } else {
            performMalwareScan()
        }
    }

    private fun performMalwareScan() {
        scanResultTextView.text = "Scanning installed apps for malware..."
        progressBar.visibility = android.view.View.VISIBLE
        CoroutineScope(Dispatchers.IO).launch {
            val packageManager = packageManager
            val installedPackages = packageManager.getInstalledPackages(0)
            val suspiciousApps = mutableListOf<String>()
            val client = OkHttpClient()

            // VirusTotal API key
            val apiKey = "INSERT_YOUR_VIRUSTOTAL_API_KEY_HERE"

            for (pkg in installedPackages) {
                val apkPath = pkg.applicationInfo.sourceDir
                val apkFile = File(apkPath)
                val sha256Hash = calculateSHA256(apkFile)
                val isMalicious = checkVirusTotalHash(client, apiKey, sha256Hash)
                if (isMalicious) {
                    suspiciousApps.add(pkg.packageName)
                }
            }

            runOnUiThread {
                progressBar.visibility = android.view.View.GONE
                if (suspiciousApps.isEmpty()) {
                    scanResultTextView.text = "No malware detected on your device."
                } else {
                    scanResultTextView.text = "Warning! Suspicious apps found:\n" + suspiciousApps.joinToString("\n")
                }
            }
        }
    }

    private fun calculateSHA256(file: File): String {
        val digest = MessageDigest.getInstance("SHA-256")
        val inputStream = FileInputStream(file)
        val buffer = ByteArray(8192)
        var read: Int
        while (inputStream.read(buffer).also { read = it } > 0) {
            digest.update(buffer, 0, read)
        }
        inputStream.close()
        val hash = digest.digest()
        return String.format("%064x", BigInteger(1, hash))
    }

    private fun checkVirusTotalHash(client: OkHttpClient, apiKey: String, sha256Hash: String): Boolean {
        val url = "https://www.virustotal.com/api/v3/files/$sha256Hash"
        val request = Request.Builder()
            .url(url)
            .addHeader("x-apikey", apiKey)
            .build()
        try {
            client.newCall(request).execute().use { response ->
                if (!response.isSuccessful) {
                    Log.e("MainActivity", "VirusTotal API error: ${response.code}")
                    return false
                }
                val json = JSONObject(response.body?.string() ?: "")
                val data = json.optJSONObject("data")
                val attributes = data?.optJSONObject("attributes")
                val lastAnalysisStats = attributes?.optJSONObject("last_analysis_stats")
                val maliciousCount = lastAnalysisStats?.optInt("malicious") ?: 0
                return maliciousCount > 0
            }
        } catch (e: Exception) {
            Log.e("MainActivity", "Error checking VirusTotal API", e)
            return false
        }
    }

    private fun checkForAndroidUpdate() {
        // This is a placeholder: Android does not provide a public API to check for system updates directly.
        // We can open the system update settings screen for the user.
        try {
            val intent = Intent(Settings.ACTION_SYSTEM_UPDATE_SETTINGS)
            startActivity(intent)
            updateStatusTextView.text = "Opened system update settings."
        } catch (e: Exception) {
            updateStatusTextView.text = "Unable to open system update settings."
            Log.e("MainActivity", "Error opening system update settings", e)
        }
    }
}
